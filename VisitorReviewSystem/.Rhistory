library(shiny)
?textInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?radioButtons
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tags$textarea
tags$textarea
shiny::runApp()
?fluidRow
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?fluidRow
?column
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(jsonlite)
?fromJSON
data.frame("a","b")
data.frame(email = "a",comment = "b")
comments = data.frame(email = "a",comment = "b", rate = 5)
list(comments, view = 1)
list(comments = comments, view = 1)
toJSON(list(comments = comments, view = 1), "feedback.json")
?toJSON
feedback = toJSON(list(comments = comments, view = 1))
feedback
data.frame(a,b,c)
data.frame(a)
a
data.frame(a="")
data.frame(email = character(0),comments = character(0))
?renderHTML
?renderHtml
library(shiny)
?renderHtml
?renderTable
eedback = data.frame(email = character(0),comments = character(0), time = character(0), rate = integer(0))
View(eedback)
?textOutput
?htmlOutput
five = four = three = two = one = 0
sys.Time()
sys.time()
Sys.time()
shiny::runApp()
feedback = data.frame(username = character(0),comments = character(0), time = character(0), rate = integer(0))
as.character(feedback)
shiny::runApp()
feedback = data.frame(username = "name",comments = "loveit", time = "2016", rate = 3L
)
feedback = data.frame(username = "name",comments = "loveit", time = "2016", rate = 3L)
as.character(feedback)
cat(feedback)
as.matrix(feedback)
as.character(as.matrix(feedback))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?eventReactive
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?plotOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('shiny')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x = icon("star")
x
source("a = 123")
x = icon("star","star")
shiny::runApp()
x = icon("star")
?tagAppendChild
shiny::runApp()
shiny::runApp()
tagAppendChild(icon("star"),icon("star"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
tags
tag
?p
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
feedback.update()
a = feedback.update()
exit
q
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textarea
tags$textarea
?tags$textarea
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?submitButton
?eventReac
?eventReactive
library(shiny)
?observe
shiny::runApp()
shiny::runApp()
shiny::runApp()
?eventReactive
shiny::runApp()
mtcars
mtcars[1,]
mtcars[0,]
mtcars[-1,]
mtcars[-90,]
mtcars[-100,]
mtcars[-300,]
mtcars[-600,]
mtcars[600,]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
temp = Sys.time()
temp
Sys.time() - temp
as.character(Sys.time() - temp)
as.numeric(Sys.time() - temp)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars
table(mtcars$cyl)
table(mtcars$cyl)$4
table(mtcars$cyl)$"4"
data.frame(table(mtcars$cyl)))
data.frame(table(mtcars$cyl))
t(table(mtcars$cyl))
t(table(mtcars$cyl))$"4"
t(table(mtcars$cyl))["4"]
as.list(table(mtcars$cyl))
as.list(table(mtcars$cyl))$4
as.list(table(mtcars$cyl))$"4"
as.list(table(mtcars$cyl))$"1"
shiny::runApp()
alist = as.list(table(mtcars$cyl))
alist
c(alist$"4",alist$"8")
c(alist$"4",alist$"8",alist$"2")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tags
tags()
names(tags)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getOption("repos")
install.packages('devtools')
feedback = read.csv("feedback.csv")
View(feedback)
View(feedback)
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
df = read.csv("feedback.csv")
df$username
df
df$username = ""
df$comments = ""
write.csv(df,"feedback2.csv", row.names = F)
df
df2 = read.csv("feedback2.csv")
df2
?read.csv
feedback = read.csv("feedback.csv", na.strings = "")
feedback
shiny::runApp()
library(slidify)
author('VisitorReviewSystem')
?renderUI
library(shiny)
?renderUI
